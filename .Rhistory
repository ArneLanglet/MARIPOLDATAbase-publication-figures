# Load necessary packages for data manipulation and visualization
library(readxl)       # For reading Excel files
library(openxlsx)     # Additional tools for Excel file handling
library(countrycode)  # For country code conversions (not explicitly used here)
library(data.table)   # Efficient data manipulation
library(tidyverse)    # Includes ggplot2, dplyr, and other useful tools
library(dplyr)        # For data manipulation
library(stringr)      # For string operations
library(ggplot2)      # For data visualization
library(zoo)          # For working with time-series data
library(tidytext)     # For text mining and manipulation
library("rnaturalearth")
library("rnaturalearthdata")
require(countrycode)
require(maps)
# Set the working directory where the data file is located
setwd("P:/10_ERC_MARIPOLDATA/WP1/Collected Data/4_final data/Aussda database publications")  # Specify the path to your working directory if needed
# Load the dataset from an Excel file
bbnj <- read_excel("10839_da_en_v3_0.xlsx")  # Replace with the actual file path
# Filter the data for relevant observations
# Exclude rows where 'double' equals 1
bbnj_ac <- filter(bbnj, double != 1)
# Retain only rows where the negotiation format is either "plenary" or "working group"
bbnj_ac <- filter(bbnj_ac, negotiation_format %in% c("plenary", "working group"))
# Count the number of observations per actor (e.g., country)
countries_fa <- bbnj_ac %>%
group_by(actor) %>%
dplyr::summarise(count = n())
# Load a world map dataset using rnaturalearth and convert it to an sf object
world <- ne_countries(scale = "medium", returnclass = "sf")
# Standardize the country names in the world map to lowercase for matching purposes
world$sovereignt <- str_to_lower(world$sovereignt)
# Extract a list of unique country names from the world map dataset
countries_list <- unique(world$sovereignt)
# Harmonize actor names in the dataset to match the names in the world map
countries_fa$actor[countries_fa$actor == "usa"] <- 'united states of america'
countries_fa$actor[countries_fa$actor == "uk"] <- 'united kingdom'
countries_fa$actor[countries_fa$actor == "cote divoire"] <- 'ivory coast'
countries_fa$actor[countries_fa$actor == "viet nam"] <- 'vietnam'
countries_fa$actor[countries_fa$actor == "bahamas"] <- 'the bahamas'
countries_fa$actor[countries_fa$actor == "tanzania"] <- 'united republic of tanzania'
countries_fa$actor[countries_fa$actor == "republic of korea"] <- 'south korea'
countries_fa$actor[countries_fa$actor == "cabo verde"] <- 'cape verde'
countries_fa$actor[countries_fa$actor == "syrian arabic republic"] <- 'syria'
countries_fa$actor[countries_fa$actor == "papua neu guinea"] <- 'papua new guinea'
countries_fa$actor[countries_fa$actor == "timor-leste"] <- 'east timor'
countries_fa$actor[countries_fa$actor == "tunesia"] <- 'tunisia'
# Filter for countries that are in the world map dataset or represent the EU
countries_fa <- countries_fa %>% filter(actor %in% countries_list | actor == "eu")
# Define a list of European Union (EU) member states
eu <- c("Austria", "Italy", "Belgium", "Latvia", "Bulgaria", "Lithuania", "Croatia",
"Luxembourg", "Cyprus", "Malta", "Czech Republic", "Netherlands", "Denmark", "Poland",
"Estonia", "Portugal", "Finland", "Romania", "France", "Slovakia", "Germany",
"Slovenia", "Greece", "Spain", "Hungary", "Sweden", "Ireland", "United Kingdom")
# Convert the list of EU countries to lowercase for consistency
eu <- str_to_lower(eu)
# Define a list of European Union (EU) member states
eu <- c("Austria", "Italy", "Belgium", "Latvia", "Bulgaria", "Lithuania", "Croatia",
"Luxembourg", "Cyprus", "Malta", "Czechia", "Netherlands", "Denmark", "Poland",
"Estonia", "Portugal", "Finland", "Romania", "France", "Slovakia", "Germany",
"Slovenia", "Greece", "Spain", "Hungary", "Sweden", "Ireland", "United Kingdom")
# Convert the list of EU countries to lowercase for consistency
eu <- str_to_lower(eu)
# Merge the world map data with the actor data based on the 'sovereignt' column
world <- merge(world, countries_fa, by = 'sovereignt', all.y = TRUE, all.x = TRUE)
# Update the count for EU member states to reflect the count for "EU"
world$count <- ifelse(world$sovereignt %in% eu, countries_fa$count[countries_fa$actor == "eu"], world$count)
# Update the count for EU member states to reflect the count for "EU"
world$count <- ifelse(world$sovereignt %in% eu, countries_fa$count[countries_fa$actor == "eu"], world$count)
world$count
# Count the number of observations per actor (e.g., country)
countries_fa <- bbnj_ac %>%
group_by(actor) %>%
dplyr::summarise(count = n())
countries_fa$count
# Load a world map dataset using rnaturalearth and convert it to an sf object
world <- ne_countries(scale = "medium", returnclass = "sf")
# Standardize the country names in the world map to lowercase for matching purposes
world$sovereignt <- str_to_lower(world$sovereignt)
# Extract a list of unique country names from the world map dataset
countries_list <- unique(world$sovereignt)
# Harmonize actor names in the dataset to match the names in the world map
countries_fa$actor[countries_fa$actor == "usa"] <- 'united states of america'
countries_fa$actor[countries_fa$actor == "uk"] <- 'united kingdom'
countries_fa$actor[countries_fa$actor == "cote divoire"] <- 'ivory coast'
countries_fa$actor[countries_fa$actor == "viet nam"] <- 'vietnam'
countries_fa$actor[countries_fa$actor == "bahamas"] <- 'the bahamas'
countries_fa$actor[countries_fa$actor == "tanzania"] <- 'united republic of tanzania'
countries_fa$actor[countries_fa$actor == "republic of korea"] <- 'south korea'
countries_fa$actor[countries_fa$actor == "cabo verde"] <- 'cape verde'
countries_fa$actor[countries_fa$actor == "syrian arabic republic"] <- 'syria'
countries_fa$actor[countries_fa$actor == "papua neu guinea"] <- 'papua new guinea'
countries_fa$actor[countries_fa$actor == "timor-leste"] <- 'east timor'
countries_fa$actor[countries_fa$actor == "tunesia"] <- 'tunisia'
# Filter for countries that are in the world map dataset or represent the EU
countries_fa <- countries_fa %>% filter(actor %in% countries_list | actor == "eu")
# Add a new column to facilitate merging with the world map dataset
countries_fa <- countries_fa %>% mutate(sovereignt = actor)
countries_fa$ccount
countries_fa$count
# Define a list of European Union (EU) member states
eu <- c("Austria", "Italy", "Belgium", "Latvia", "Bulgaria", "Lithuania", "Croatia",
"Luxembourg", "Cyprus", "Malta", "Czechia", "Netherlands", "Denmark", "Poland",
"Estonia", "Portugal", "Finland", "Romania", "France", "Slovakia", "Germany",
"Slovenia", "Greece", "Spain", "Hungary", "Sweden", "Ireland", "United Kingdom")
# Convert the list of EU countries to lowercase for consistency
eu <- str_to_lower(eu)
# Merge the world map data with the actor data based on the 'sovereignt' column
world <- merge(world, countries_fa, by = 'sovereignt', all.y = TRUE, all.x = TRUE)
# Update the count for EU member states to reflect the count for "EU"
world$count <- ifelse(world$sovereignt %in% eu, countries_fa$count[countries_fa$actor == "eu"], world$count)
# Rename the count column for better interpretation in the plot
world$Interventions <- world$count
# Plotting the map with intervention counts
ggplot() +
geom_sf(data = world, aes(fill = count)) +  # Use fill to represent intervention counts
scale_fill_viridis_c(
option = "plasma",
trans = "sqrt",  # Apply a square root transformation to the fill scale
name = "Number of \nInterventions",  # Custom legend title
breaks = c(25, 50, 75, 100, 125),  # Specify the breakpoints for the scale
) +
theme_minimal() +  # Use a minimal theme for clean visualization
theme(
panel.grid = element_blank(),  # Remove grid lines
panel.background = element_rect(fill = "white", color = NA),  # Set background to white
plot.background = element_rect(fill = "white", color = NA),  # Set plot background to white
legend.title = element_text(size = 14, face = "bold"),  # Larger legend title
legend.text = element_text(size = 12),  # Larger legend text
axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Center and bold title
plot.subtitle = element_text(hjust = 0.5, size = 14)  # Center subtitle
)
# Plotting the map with intervention counts
ggplot() +
geom_sf(data = world, aes(fill = count)) +  # Use fill to represent intervention counts
scale_fill_viridis_c(
option = "plasma",
trans = "sqrt",  # Apply a square root transformation to the fill scale
name = "Number of \nInterventions, Opening or\nClosing Statements",  # Custom legend title
breaks = c(25, 50, 75, 100, 125),  # Specify the breakpoints for the scale
) +
theme_minimal() +  # Use a minimal theme for clean visualization
theme(
panel.grid = element_blank(),  # Remove grid lines
panel.background = element_rect(fill = "white", color = NA),  # Set background to white
plot.background = element_rect(fill = "white", color = NA),  # Set plot background to white
legend.title = element_text(size = 14, face = "bold"),  # Larger legend title
legend.text = element_text(size = 12),  # Larger legend text
axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Center and bold title
plot.subtitle = element_text(hjust = 0.5, size = 14)  # Center subtitle
)
unique(world$sovereignt)
# Load a world map dataset using rnaturalearth and convert it to an sf object
world <- ne_countries(scale = "medium", returnclass = "sf")
# Standardize the country names in the world map to lowercase for matching purposes
world$sovereignt <- str_to_lower(world$sovereignt)
# Extract a list of unique country names from the world map dataset
countries_list <- unique(world$sovereignt)
# Harmonize actor names in the dataset to match the names in the world map
countries_fa$actor[countries_fa$actor == "usa"] <- 'united states of america'
countries_fa$actor[countries_fa$actor == "uk"] <- 'united kingdom'
countries_fa$actor[countries_fa$actor == "cote divoire"] <- 'ivory coast'
countries_fa$actor[countries_fa$actor == "viet nam"] <- 'vietnam'
countries_fa$actor[countries_fa$actor == "bahamas"] <- 'the bahamas'
countries_fa$actor[countries_fa$actor == "tanzania"] <- 'united republic of tanzania'
countries_fa$actor[countries_fa$actor == "republic of korea"] <- 'south korea'
countries_fa$actor[countries_fa$actor == "cabo verde"] <- 'cape verde'
countries_fa$actor[countries_fa$actor == "syrian arabic republic"] <- 'syria'
countries_fa$actor[countries_fa$actor == "papua neu guinea"] <- 'papua new guinea'
countries_fa$actor[countries_fa$actor == "timor-leste"] <- 'east timor'
countries_fa$actor[countries_fa$actor == "tunesia"] <- 'tunisia'
# Filter actors for countries that are in the world map dataset or represent the EU
countries_fa <- countries_fa %>% filter(actor %in% countries_list | actor == "eu")
# Add a new column to facilitate merging with the world map dataset
countries_fa <- countries_fa %>% mutate(sovereignt = actor)
# Define a list of European Union (EU) member states
eu <- c("Austria", "Italy", "Belgium", "Latvia", "Bulgaria", "Lithuania", "Croatia",
"Luxembourg", "Cyprus", "Malta", "Czech Republic", "Netherlands", "Denmark", "Poland",
"Estonia", "Portugal", "Finland", "Romania", "France", "Slovakia", "Germany",
"Slovenia", "Greece", "Spain", "Hungary", "Sweden", "Ireland", "United Kingdom")
# Convert the list of EU countries to lowercase for consistency
eu <- str_to_lower(eu)
# Merge the world map data with the actor data based on the 'sovereignt' column
world <- merge(world, countries_fa, by = 'sovereignt', all.y = TRUE, all.x = TRUE)
# Update the count for EU member states to reflect the count for "EU"
world$count <- ifelse(world$sovereignt %in% eu, countries_fa$count[countries_fa$actor == "eu"], world$count)
# Rename the count column for better interpretation in the plot
world$Interventions <- world$count
# Plotting the map with intervention counts
ggplot() +
geom_sf(data = world, aes(fill = count)) +  # Use fill to represent intervention counts
scale_fill_viridis_c(
option = "plasma",
trans = "sqrt",  # Apply a square root transformation to the fill scale
name = "Number of \nInterventions, Opening or\nClosing Statements",  # Custom legend title
breaks = c(25, 50, 75, 100, 125),  # Specify the breakpoints for the scale
) +
theme_minimal() +  # Use a minimal theme for clean visualization
theme(
panel.grid = element_blank(),  # Remove grid lines
panel.background = element_rect(fill = "white", color = NA),  # Set background to white
plot.background = element_rect(fill = "white", color = NA),  # Set plot background to white
legend.title = element_text(size = 14, face = "bold"),  # Larger legend title
legend.text = element_text(size = 12),  # Larger legend text
axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),  # Center and bold title
plot.subtitle = element_text(hjust = 0.5, size = 14)  # Center subtitle
)
